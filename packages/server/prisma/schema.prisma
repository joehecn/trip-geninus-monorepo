/// =================================================================
/// 应用层业务逻辑注意事项 (Application-Layer Business Logic Notes)
/// =================================================================
///
/// 本 Schema 定义了数据结构和关系，但部分复杂的业务规则需要应用层代码来保证：
///
/// 1.  **多态关联校验**:
///     - 在 `UserFavorite`, `Asset`, `ItineraryDestination`, `TourGroupPhoto` 等模型中，使用了多个可选外键或ID字段来模拟多态。
///     - 应用层必须确保在创建或更新时，只有一个外键被赋值，且与 `...Type` 枚举字段匹配。
///
/// 2.  **条件必填逻辑**:
///     - `Itinerary`: 如果 `templateId` 存在，则 `templateVersion` 字段应为必填。
///
/// 3.  **JSON 结构校验**:
///     - `TourReview.ratings`: 应用层需要定义并校验此 JSON 字段的内部结构，以确保数据一致性。
///
/// 4.  **导游证件更新**:
///     - `TourGroupGuide.licenseNumber` 是唯一的。对于导游换发新证的场景，应用层需要设计相应的历史证件处理逻辑。
///
/// 5.  **权限控制**:
///     - `UserRole` 提供了基础的角色划分。细粒度的操作权限控制 (RBAC) 需要在业务代码中实现。
///
/// =================================================================

/// 当前Schema在数据关系、枚举约束、唯一性校验上逻辑完备，可支撑核心业务。​多态关联校验、条件必填、JSON结构验证等需依赖应用层补强，
/// 建议结合Zod与审计日志提升健壮性。通过上述优化，Schema与应用层逻辑可形成完整闭环。

/// 这是您的 Prisma schema 文件，
/// 了解更多请访问文档: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================================
// 核心模型: 景点与位置
// =================================================================

model Location {
  id        Int      @id @default(autoincrement())
  city      String   @db.VarChar(100) // 城市
  region    String?  @db.VarChar(100) // 重命名为region以获得更广泛的兼容性
  country   String   @db.VarChar(100) // 国家
  createdAt DateTime @default(now()) @db.Timestamptz() // 创建时间

  // 反向关系字段
  attractions        Attraction[]                  @relation("LocationToAttraction")
  hotels             Hotel[]                       @relation("LocationToHotel")
  restaurants        Restaurant[]                  @relation("LocationToRestaurant")
  shoppingPlaces     ShoppingPlace[]               @relation("LocationToShoppingPlace")
  itineraryDays      ItineraryDay[]
  // 天气快照反向关系
  weatherSnapshots   ItineraryDayWeatherSnapshot[]
  tourGroupGuideLogs TourGroupGuideLog[]

  @@unique([city, region, country])
  @@map("locations")
}

model Attraction {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(255) // 景点名称
  description   String?  @db.Text // 景点描述
  address       String   @db.VarChar(511) // 地址
  phone         String?  @db.VarChar(30) // 联系电话
  latitude      Decimal? @db.Decimal(9, 6) // 纬度
  longitude     Decimal? @db.Decimal(9, 6) // 经度
  averageRating Decimal  @default(0.00) @db.Decimal(3, 2) // 平均评分
  reviewCount   Int      @default(0) // 评论数量
  createdAt     DateTime @default(now()) @db.Timestamptz() // 创建时间
  updatedAt     DateTime @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  location   Location @relation("LocationToAttraction", fields: [locationId], references: [id], onDelete: Restrict)
  locationId Int

  categories           AttractionCategory[]
  favoritedBy          UserFavorite[]
  destinations         ItineraryDestination[]
  templateDestinations TemplateDestination[]
  assets               Asset[]                @relation("AttractionToAsset")

  @@index([locationId])
  @@index([averageRating])
  @@index([locationId, averageRating]) // 复合索引提升按地点和评分查询的性能
  @@map("attractions")
}

// =================================================================
// 分类与分类法
// =================================================================

// 分类类型枚举
enum CategoryType {
  CAT_ATTRACTION
  CAT_HOTEL
  CAT_RESTAURANT
  CAT_SHOPPING_PLACE
  CAT_TRANSPORTATION
}

model Category {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(100) // 分类名称
  type        CategoryType // 分类类型
  description String?      @db.Text // 分类描述

  attractions     AttractionCategory[]
  hotels          HotelCategory[]
  restaurants     RestaurantCategory[]
  shoppingPlaces  ShoppingPlaceCategory[]
  transportations TransportationCategory[]

  @@unique([name, type])
  @@map("categories")
}

model AttractionCategory {
  attraction   Attraction @relation(fields: [attractionId], references: [id], onDelete: Cascade)
  attractionId Int
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   Int

  @@id([attractionId, categoryId])
  @@map("attraction_categories")
}

model HotelCategory {
  hotel      Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId    Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  @@id([hotelId, categoryId])
  @@map("hotel_categories")
}

model RestaurantCategory {
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   Int

  @@id([restaurantId, categoryId])
  @@map("restaurant_categories")
}

model ShoppingPlaceCategory {
  shoppingPlace   ShoppingPlace @relation(fields: [shoppingPlaceId], references: [id], onDelete: Cascade)
  shoppingPlaceId Int
  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      Int

  @@id([shoppingPlaceId, categoryId])
  @@map("shopping_place_categories")
}

model TransportationCategory {
  transportation   Transportation @relation(fields: [transportationId], references: [id], onDelete: Cascade)
  transportationId Int
  category         Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId       Int

  @@id([transportationId, categoryId])
  @@map("transportation_categories")
}

// =================================================================
// 用户相关模型
// =================================================================

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(50) // 用户名
  email        String   @unique @db.VarChar(255) // 邮箱
  passwordHash String   @db.VarChar(255) // 密码哈希值
  fullName     String?  @db.VarChar(100) // 全名
  role         UserRole @default(USER) // 用户角色
  createdAt    DateTime @default(now()) @db.Timestamptz() // 创建时间

  // 新增字段
  openid       String?     @unique @db.VarChar(255) // 微信唯一标识
  idCardType   IdCardType? // 证件类型
  idCardNumber String?     @db.VarChar(255) // 证件号码
  gender       Gender? // 性别
  dateOfBirth  DateTime?   @db.Date // 出生日期
  phone        String?     @db.VarChar(30) // 手机号

  favorites            UserFavorite[] // 用户收藏
  uploadedAssets       Asset[]                @relation("AssetUploader") // 上传的媒体资源
  TourGroup            TourGroup[] // 组织的旅行团
  TourGroupParticipant TourGroupParticipant[] // 参与的旅行团
  ItineraryTemplate    ItineraryTemplate[] // 创建的行程模板
  // 导游信息反向关系
  guideInfo            TourGroupGuide?        @relation("TourGroupGuideToUser") // 导游信息
  // 审计日志反向关系
  auditLogs            AuditLog[] // 审计日志

  @@map("users")
}

// 用户角色枚举
enum UserRole {
  ADMIN // 系统管理员
  PLANNER // 计划调度员
  GUIDE // 导游
  USER // 普通用户
}

// 证件类型枚举
enum IdCardType {
  ID_CARD // 身份证
  PASSPORT // 护照
  HOME_RETURN_PERMIT // 港澳回乡证
  TAIWAN_COMPATRIOT_PERMIT // 台胞证
  OFFICER_ID // 军官证
  OTHER // 其它
}

// 性别枚举
enum Gender {
  MALE
  FEMALE
  OTHER
}

// 上传者类型枚举
enum UploaderType {
  USER
  PARTICIPANT
}

// 收藏实体类型枚举
enum FavoriteEntityType {
  FAV_ATTRACTION
  FAV_HOTEL
  FAV_RESTAURANT
  FAV_SHOPPING_PLACE
  FAV_TRANSPORTATION
}

model UserFavorite {
  id         Int                @id @default(autoincrement())
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int // 用户ID
  entityType FavoriteEntityType // 实体类型

  // 可选的景点关联
  attraction   Attraction? @relation(fields: [attractionId], references: [id], onDelete: Cascade)
  attractionId Int?

  // 可选的酒店关联
  hotel   Hotel? @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId Int?

  // 可选的餐厅关联
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int?

  // 可选的购物场所关联
  shoppingPlace   ShoppingPlace? @relation(fields: [shoppingPlaceId], references: [id], onDelete: Cascade)
  shoppingPlaceId Int?

  // 可选的交通方式关联
  transportation   Transportation? @relation(fields: [transportationId], references: [id], onDelete: Cascade)
  transportationId Int?

  createdAt DateTime @default(now()) @db.Timestamptz() // 创建时间
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  @@unique([userId, attractionId], map: "user_attraction_favorite_unique")
  @@unique([userId, hotelId], map: "user_hotel_favorite_unique")
  @@unique([userId, restaurantId], map: "user_restaurant_favorite_unique")
  @@unique([userId, shoppingPlaceId], map: "user_shopping_place_favorite_unique")
  @@unique([userId, transportationId], map: "user_transportation_favorite_unique")
  @@index([userId, entityType])
  @@index([attractionId])
  @@index([hotelId])
  @@index([restaurantId])
  @@index([shoppingPlaceId])
  @@index([transportationId])
  @@map("user_favorites")
}

// =================================================================
// 附加信息模型
// =================================================================

// 媒体类型枚举
enum MediaType {
  IMAGE
  VIDEO
}

// 统一的媒体资源模型
model Asset {
  id         Int       @id @default(autoincrement())
  mediaType  MediaType // 媒体类型
  url        String    @db.VarChar(2048) // 资源URL
  caption    String?   @db.Text // 描述
  isPrimary  Boolean   @default(false) // 是否为主图
  uploadedAt DateTime  @default(now()) @db.Timestamptz() // 上传时间

  // 上传者关联
  uploader   User @relation("AssetUploader", fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId Int

  // 显式关联替换多态关联
  attraction      Attraction?    @relation("AttractionToAsset", fields: [attractionId], references: [id], onDelete: Cascade)
  attractionId    Int?
  hotel           Hotel?         @relation("HotelToAsset", fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId         Int?
  restaurant      Restaurant?    @relation("RestaurantToAsset", fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId    Int?
  shoppingPlace   ShoppingPlace? @relation("ShoppingPlaceToAsset", fields: [shoppingPlaceId], references: [id], onDelete: Cascade)
  shoppingPlaceId Int?

  @@index([uploaderId])
  @@index([attractionId])
  @@index([hotelId])
  @@index([restaurantId])
  @@index([shoppingPlaceId])
  @@map("assets")
}

// =================================================================
// 酒店模型
// =================================================================

model Hotel {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(255) // 酒店名称
  description   String?  @db.Text // 酒店描述
  address       String   @db.VarChar(511) // 地址
  phone         String?  @db.VarChar(30) // 联系电话
  latitude      Decimal? @db.Decimal(9, 6) // 纬度
  longitude     Decimal? @db.Decimal(9, 6) // 经度
  starRating    Int      @default(0) // 0 = 未评级, 1-5 = 星级
  averageRating Decimal  @default(0.00) @db.Decimal(3, 2) // 平均评分
  reviewCount   Int      @default(0) // 评论数量
  createdAt     DateTime @default(now()) @db.Timestamptz() // 创建时间
  updatedAt     DateTime @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  location   Location @relation("LocationToHotel", fields: [locationId], references: [id], onDelete: Restrict)
  locationId Int

  favoritedBy          UserFavorite[]
  rooms                HotelRoom[]
  amenities            HotelAmenity[]
  categories           HotelCategory[]
  destinations         ItineraryDestination[]
  templateDestinations TemplateDestination[]
  ItineraryHotelStay   ItineraryHotelStay[]
  assets               Asset[]                @relation("HotelToAsset")

  @@index([locationId])
  @@index([locationId, starRating]) // 复合索引提升按地点和评分查询的性能
  @@map("hotels")
}

model HotelRoom {
  id           Int     @id @default(autoincrement())
  roomType     String  @db.VarChar(100) // 房间类型
  description  String? @db.Text // 房间描述
  isAvailable  Boolean @default(true) // 是否可用
  maxOccupancy Int     @default(2) // 最大入住人数

  hotel   Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId Int

  @@index([hotelId])
  @@map("hotel_rooms")
}

model Amenity {
  id          Int            @id @default(autoincrement())
  name        String         @unique @db.VarChar(100) // 设施名称
  description String?        @db.Text // 设施描述
  hotels      HotelAmenity[] // 关联的酒店设施

  @@map("amenities")
}

model HotelAmenity {
  hotel     Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId   Int
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  amenityId Int

  @@id([hotelId, amenityId])
  @@map("hotel_amenities")
}

// =================================================================
// 旅行团模型
// =================================================================

model TourGroup {
  id              Int             @id @default(autoincrement())
  name            String          @db.VarChar(255) // 旅行团名称
  description     String?         @db.Text // 旅行团描述
  startDate       DateTime        @db.Date // 开始日期
  endDate         DateTime        @db.Date // 结束日期
  maxParticipants Int // 最大参与人数
  status          TourGroupStatus @default(ACTIVE) // 旅行团状态
  createdAt       DateTime        @default(now()) @db.Timestamptz() // 创建时间
  updatedAt       DateTime        @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  organizer User @relation(fields: [userId], references: [id], onDelete: Restrict) // 组织者
  userId    Int

  // 修复一对一关系定义，只在一方定义 fields 和 references
  itinerary Itinerary? // 行程
  reviews   TourReview[] // 评价

  participants      TourGroupParticipant[] // 参与者
  photos            TourGroupPhoto[] // 照片
  guideLogs         TourGroupGuideLog[] // 导游日志
  guideAssignments  TourGroupGuideAssignment[] // 导游分配
  participantGroups TourGroupParticipantGroup[] // 参与者分组

  @@index([userId])
  @@index([status, startDate]) // 复合索引提升查询效率
  @@index([startDate, endDate])
  @@map("tour_groups")
}

// 旅行团状态枚举
enum TourGroupStatus {
  DRAFT
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED
  INACTIVE
}

model TourGroupParticipant {
  id               Int       @id @default(autoincrement())
  fullName         String    @db.VarChar(255) // 全名
  email            String    @db.VarChar(255) // 邮箱
  phone            String?   @db.VarChar(30) // 增加长度以支持国际号码
  dateOfBirth      DateTime? @db.Date // 出生日期
  emergencyContact String    @db.VarChar(255) // 紧急联系人
  emergencyPhone   String    @db.VarChar(30) // 增加长度以支持国际号码
  specialRequests  String?   @db.Text // 特殊要求
  registrationDate DateTime  @default(now()) @db.Timestamptz() // 注册日期

  tourGroup   TourGroup @relation(fields: [tourGroupId], references: [id], onDelete: Cascade) // 所属旅行团
  tourGroupId Int

  user   User @relation(fields: [userId], references: [id], onDelete: Restrict) // 关联用户
  userId Int

  // 使用显式关联表
  groupMemberships TourGroupParticipantGroupMember[] // 分组成员关系
  reviews          TourReview[] // 评价

  // 关联到分配的房间
  assignedRoom   AssignedRoom? @relation(fields: [assignedRoomId], references: [id], onDelete: SetNull)
  assignedRoomId Int?

  @@index([tourGroupId])
  @@index([userId])
  @@index([assignedRoomId])
  @@map("tour_group_participants")
}

// =================================================================
// 旅行团照片模型
// =================================================================

model TourGroupPhoto {
  id         Int      @id @default(autoincrement())
  url        String   @db.VarChar(2048) // 照片URL
  caption    String?  @db.Text // 描述
  isPublic   Boolean  @default(true) // 是否公开
  uploadDate DateTime @default(now()) @db.Timestamptz() // 上传日期
  likes      Int      @default(0) // 点赞数

  tourGroup   TourGroup @relation(fields: [tourGroupId], references: [id], onDelete: Cascade) // 所属旅行团
  tourGroupId Int

  // 统一的上传者逻辑
  uploaderType UploaderType // 上传者类型 (用户或参与者)
  uploaderId   Int // 上传者ID (关联到 User 或 TourGroupParticipant)

  @@index([tourGroupId])
  @@index([uploaderType, uploaderId])
  @@map("tour_group_photos")
}

// =================================================================
// 统一的旅行评价系统
// =================================================================

// 定义旅行中被评价的对象类型
enum TourReviewTargetType {
  // 具体的数据库实体
  TOUR_GROUP // 整体旅行体验
  GUIDE // 旅行中的特定导游
  HOTEL // 旅行中入住的酒店
  ATTRACTION // 旅行中参观的景点
  RESTAURANT // 旅行中用餐的餐厅
  TRANSPORTATION // 特定的交通路段
  SHOPPING_PLACE // 旅行中访问的购物场所

  // 抽象概念/系统功能
  ITINERARY_PLANNING // 行程规划体验
  CUSTOMER_SUPPORT // 客户支持服务
  APP_USABILITY // 移动端或网页端应用的可用性
  OTHER_FEEDBACK // 一般性或其他反馈
}

// 旅行参与者创建的统一评价模型
model TourReview {
  id        Int      @id @default(autoincrement())
  comment   String?  @db.Text // 评论内容
  createdAt DateTime @default(now()) @db.Timestamptz() // 创建时间
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  // 评价的作者（始终是参与者）
  participant   TourGroupParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId Int

  // 此评价所属的旅行团
  tourGroup   TourGroup @relation(fields: [tourGroupId], references: [id], onDelete: Cascade)
  tourGroupId Int

  // 被评价的对象类型
  targetType TourReviewTargetType

  // 对于具体数据库实体的评价，此处保存实体ID（如酒店ID、导游ID）
  // 对于抽象反馈（如CUSTOMER_SUPPORT），此处可以为空
  targetId Int?

  // 灵活的多维度评分，以JSON格式存储
  // 例如，对于酒店: { "overall": 5, "cleanliness": 4, "service": 5 }
  // 例如，对于导游: { "knowledge": 5, "friendliness": 5 }
  ratings Json

  @@index([participantId])
  @@index([tourGroupId])
  @@index([targetType, targetId]) // 用于统计查询的索引
  @@map("tour_reviews")
}

// =================================================================
// 旅行团导游模型
// =================================================================

// 旅行团导游信息
model TourGroupGuide {
  id                Int      @id @default(autoincrement())
  fullName          String   @db.VarChar(255) // 全名
  phone             String   @db.VarChar(30) // 电话
  email             String?  @db.VarChar(255) // 邮箱
  /// 导游资质编号
  licenseNumber     String   @unique @db.VarChar(100) // 改为必填，导游资质需强制登记
  yearsOfExperience Int? // 经验年限
  specialty         String?  @db.Text // 专业领域
  introduction      String?  @db.Text // 介绍
  userId            Int      @unique
  createdAt         DateTime @default(now()) @db.Timestamptz() // 创建时间
  updatedAt         DateTime @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  user             User                       @relation("TourGroupGuideToUser", fields: [userId], references: [id], onDelete: Cascade)
  guideAssignments TourGroupGuideAssignment[]

  @@map("tour_group_guides")
}

// 行程条目类型枚举
enum ItineraryItemType {
  TRANSPORTATION // 交通（飞机、火车、汽车、轮船等）
  DINING // 餐饮（饭店、当地特色菜品、菜谱等）
  ATTRACTION // 景点
  ACCOMMODATION // 酒店住宿
  SHOPPING // 购物
  OTHER // 其它活动
}

// 旅行团与导游的关联
model TourGroupGuideAssignment {
  id         Int       @id @default(autoincrement())
  assignedAt DateTime  @default(now()) @db.Timestamptz() // 分配时间
  role       GuideRole @default(LEAD_GUIDE) // 导游角色

  tourGroup   TourGroup @relation(fields: [tourGroupId], references: [id], onDelete: Cascade) // 旅行团
  tourGroupId Int

  guide   TourGroupGuide @relation(fields: [guideId], references: [id], onDelete: Cascade) // 导游
  guideId Int

  @@unique([tourGroupId, guideId])
  @@map("tour_group_guide_assignments")
}

// 导游角色枚举
enum GuideRole {
  LEAD_GUIDE
  LOCAL_GUIDE
  INTERPRETER
  DRIVER
}

// 导游工作日志
model TourGroupGuideLog {
  id                Int          @id @default(autoincrement())
  title             String       @db.VarChar(255) // 标题
  content           String       @db.Text // 内容
  logType           GuideLogType @default(DAILY_LOG) // 日志类型
  date              DateTime     @db.Date // 日期
  startTime         DateTime?    @db.Time // 开始时间
  endTime           DateTime?    @db.Time // 结束时间
  location          Location?    @relation(fields: [locationId], references: [id], onDelete: SetNull) // 关联地点
  locationId        Int?
  weather           String?      @db.VarChar(100) // 天气
  participantsCount Int? // 参与人数
  issues            String?      @db.Text // 问题
  solutions         String?      @db.Text // 解决方案
  nextDayPlan       String?      @db.Text // 次日计划
  isImportant       Boolean      @default(false) // 是否重要
  createdAt         DateTime     @default(now()) @db.Timestamptz() // 创建时间
  updatedAt         DateTime     @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  tourGroup   TourGroup @relation(fields: [tourGroupId], references: [id], onDelete: Cascade)
  tourGroupId Int

  @@index([tourGroupId])
  @@index([locationId])
  @@map("tour_group_guide_logs")
}

// 导游日志类型枚举
enum GuideLogType {
  DAILY_LOG
  ACTIVITY_LOG
  INCIDENT_LOG
  WEATHER_LOG
  FINANCIAL_LOG
}

// =================================================================
// 房间分配模型
// =================================================================

// 行程酒店住宿安排
model ItineraryHotelStay {
  id           Int      @id @default(autoincrement())
  checkInDate  DateTime @db.Date // 入住日期
  checkOutDate DateTime @db.Date // 退房日期
  notes        String?  @db.Text // 备注
  createdAt    DateTime @default(now()) @db.Timestamptz() // 创建时间
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  // 关联到行程中的住宿条目
  destination   ItineraryDestination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId Int                  @unique

  hotel   Hotel @relation(fields: [hotelId], references: [id], onDelete: Restrict) // 酒店
  hotelId Int

  // 住宿期间的房间分配
  assignedRooms AssignedRoom[]

  @@index([hotelId])
  @@map("itinerary_hotel_stays")
}

// 分配的房间（支持多人）
model AssignedRoom {
  id         Int     @id @default(autoincrement())
  roomNumber String  @db.VarChar(50) // 房间号
  notes      String? @db.Text // 备注

  hotelStay   ItineraryHotelStay @relation(fields: [hotelStayId], references: [id], onDelete: Cascade)
  hotelStayId Int

  // 这个房间内的所有参与者
  occupants TourGroupParticipant[]

  @@index([hotelStayId])
  @@map("assigned_rooms")
}

// =================================================================
// 旅行团成员分组模型
// =================================================================

// 团队成员分组
model TourGroupParticipantGroup {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100) // 分组名称
  description String?  @db.Text // 分组描述
  createdAt   DateTime @default(now()) @db.Timestamptz() // 创建时间
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  tourGroup   TourGroup @relation(fields: [tourGroupId], references: [id], onDelete: Cascade) // 所属旅行团
  tourGroupId Int

  // 显式定义关联表以支持更多元数据
  members TourGroupParticipantGroupMember[]

  @@index([tourGroupId])
  @@map("tour_group_participant_groups")
}

// 团队成员分组关联表
model TourGroupParticipantGroupMember {
  group         TourGroupParticipantGroup @relation(fields: [groupId], references: [id], onDelete: Cascade) // 分组
  groupId       Int
  participant   TourGroupParticipant      @relation(fields: [participantId], references: [id], onDelete: Cascade) // 参与者
  participantId Int
  joinedAt      DateTime                  @default(now()) // 加入时间

  @@id([groupId, participantId])
  @@map("tour_group_participant_group_members")
}

// =================================================================
// 其他地点模型
// =================================================================

// 餐厅模型
model Restaurant {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(255) // 餐厅名称
  description   String?  @db.Text // 餐厅描述
  address       String   @db.VarChar(511) // 地址
  latitude      Decimal? @db.Decimal(9, 6) // 纬度
  longitude     Decimal? @db.Decimal(9, 6) // 经度
  averageRating Decimal  @default(0.00) @db.Decimal(3, 2) // 平均评分
  reviewCount   Int      @default(0) // 评论数量
  priceRange    String?  @db.VarChar(50) // 价格范围
  phone         String?  @db.VarChar(30) // 电话
  website       String?  @db.VarChar(255) // 网站
  createdAt     DateTime @default(now()) @db.Timestamptz() // 创建时间
  updatedAt     DateTime @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  location   Location @relation("LocationToRestaurant", fields: [locationId], references: [id], onDelete: Restrict) // 位置
  locationId Int

  favoritedBy          UserFavorite[]
  destinations         ItineraryDestination[]
  templateDestinations TemplateDestination[]
  assets               Asset[]                @relation("RestaurantToAsset")
  categories           RestaurantCategory[]

  @@index([locationId])
  @@index([averageRating])
  @@index([locationId, averageRating]) // 复合索引提升按地点和评分查询的性能
  @@map("restaurants")
}

// 交通方式模型
model Transportation {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255) // 交通方式名称（如：高铁、飞机、大巴等）
  description String?  @db.Text // 描述
  provider    String?  @db.VarChar(255) // 服务提供商
  createdAt   DateTime @default(now()) @db.Timestamptz() // 创建时间
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  destinations         ItineraryDestination[]
  templateDestinations TemplateDestination[]
  categories           TransportationCategory[]
  favoritedBy          UserFavorite[]

  @@map("transportations")
}

// 购物场所模型
model ShoppingPlace {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(255) // 购物场所名称
  description   String?  @db.Text // 描述
  address       String   @db.VarChar(511) // 地址
  latitude      Decimal? @db.Decimal(9, 6) // 纬度
  longitude     Decimal? @db.Decimal(9, 6) // 经度
  averageRating Decimal  @default(0.00) @db.Decimal(3, 2) // 平均评分
  reviewCount   Int      @default(0) // 评论数量
  openingHours  String?  @db.VarChar(255) // 营业时间
  phone         String?  @db.VarChar(30) // 电话
  website       String?  @db.VarChar(255) // 网站
  createdAt     DateTime @default(now()) @db.Timestamptz() // 创建时间
  updatedAt     DateTime @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  location   Location @relation("LocationToShoppingPlace", fields: [locationId], references: [id], onDelete: Restrict) // 位置
  locationId Int

  favoritedBy          UserFavorite[]
  destinations         ItineraryDestination[]
  templateDestinations TemplateDestination[]
  assets               Asset[]                 @relation("ShoppingPlaceToAsset")
  categories           ShoppingPlaceCategory[]

  @@index([locationId])
  @@index([averageRating])
  @@index([locationId, averageRating]) // 复合索引提升按地点和评分查询的性能
  @@map("shopping_places")
}

// =================================================================
// 行程模型
// =================================================================

model ItineraryTemplate {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255) // 模板标题
  description  String?  @db.Text // 模板描述
  durationDays Int // 持续天数
  isPublic     Boolean  @default(false) // 是否公开
  version      String   @default("1.0") @db.VarChar(20) // 版本号
  createdAt    DateTime @default(now()) @db.Timestamptz() // 创建时间
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  creator   User @relation(fields: [creatorId], references: [id], onDelete: Restrict) // 创建者
  creatorId Int

  destinations TemplateDestination[] // 模板目的地
  itineraries  Itinerary[] // 基于此模板创建的行程

  @@unique([title, version]) // 联合唯一索引确保模板标题和版本的唯一性
  @@index([creatorId])
  @@map("itinerary_templates")
}

model Itinerary {
  id              Int       @id @default(autoincrement())
  title           String    @db.VarChar(255) // 行程标题
  description     String?   @db.Text // 行程描述
  durationDays    Int // 持续天数
  startDate       DateTime? @db.Date // 开始日期
  endDate         DateTime? @db.Date // 结束日期
  templateVersion String?   @db.VarChar(20) // 生成时的模板版本号
  createdAt       DateTime  @default(now()) @db.Timestamptz() // 创建时间
  updatedAt       DateTime  @default(now()) @updatedAt @db.Timestamptz() // 更新时间

  template   ItineraryTemplate? @relation(fields: [templateId], references: [id], onDelete: Cascade) // 来源模板
  templateId Int?

  tourGroup   TourGroup @relation(fields: [tourGroupId], references: [id], onDelete: Cascade) // 关联的旅行团
  tourGroupId Int       @unique

  days ItineraryDay[] // 行程天数

  @@index([startDate, endDate]) // 复合索引提升日期范围查询性能
  @@index([templateId])
  @@map("itineraries")
}

// 行程天数模型，表示行程中的每一天
model ItineraryDay {
  id        Int       @id @default(autoincrement())
  dayNumber Int // 天数编号
  date      DateTime? @db.Date // 日期
  notes     String?   @db.Text // 备注

  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade) // 所属行程
  itineraryId Int

  // 当天的主要地点，例如城市
  location   Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  locationId Int?

  // 当天的活动安排
  activities ItineraryDestination[]

  // 当天的天气情况
  weatherSnapshot ItineraryDayWeatherSnapshot?

  @@unique([itineraryId, dayNumber]) // 确保同一行程中天数编号的唯一性
  @@index([locationId]) // 地点索引提升查询性能
  @@map("itinerary_days")
}

// 行程目的地模型，表示一天中的单个活动或事件
model ItineraryDestination {
  id           Int       @id @default(autoincrement())
  orderInDay   Int       @default(1) // 当天活动的排序
  description  String?   @db.Text // 描述
  startTime    DateTime? @db.Time // 开始时间
  endTime      DateTime? @db.Time // 结束时间
  notes        String?   @db.Text // 备注
  isCustomized Boolean   @default(false) // 标记是否为用户自定义修改

  // 所属的行程天数
  itineraryDay   ItineraryDay @relation(fields: [itineraryDayId], references: [id], onDelete: Cascade)
  itineraryDayId Int

  // 行程条目类型
  itemType ItineraryItemType

  // 关联到具体的实体
  attraction   Attraction? @relation(fields: [attractionId], references: [id], onDelete: Cascade)
  attractionId Int?

  hotel   Hotel? @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId Int?

  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int?

  transportation   Transportation? @relation(fields: [transportationId], references: [id], onDelete: Cascade)
  transportationId Int?

  shoppingPlace   ShoppingPlace? @relation(fields: [shoppingPlaceId], references: [id], onDelete: Cascade)
  shoppingPlaceId Int?

  ItineraryHotelStay ItineraryHotelStay?

  @@index([itineraryDayId])
  @@index([attractionId])
  @@index([hotelId])
  @@index([restaurantId])
  @@index([transportationId])
  @@index([shoppingPlaceId])
  @@map("itinerary_destinations")
}

// 行程模板目的地模型，不与特定行程日期绑定
model TemplateDestination {
  id          Int     @id @default(autoincrement())
  dayNumber   Int // 天数编号
  orderInDay  Int     @default(1) // 当天活动的排序
  description String? @db.Text // 描述
  notes       String? @db.Text // 备注

  // 行程条目类型
  itemType ItineraryItemType

  template   ItineraryTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade) // 所属模板
  templateId Int

  attraction   Attraction? @relation(fields: [attractionId], references: [id], onDelete: Cascade)
  attractionId Int?

  hotel   Hotel? @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId Int?

  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int?

  transportation   Transportation? @relation(fields: [transportationId], references: [id], onDelete: Cascade)
  transportationId Int?

  shoppingPlace   ShoppingPlace? @relation(fields: [shoppingPlaceId], references: [id], onDelete: Cascade)
  shoppingPlaceId Int?

  @@index([templateId])
  @@index([attractionId])
  @@index([hotelId])
  @@index([restaurantId])
  @@index([transportationId])
  @@index([shoppingPlaceId])
  @@map("template_destinations")
}

// =================================================================
// 天气快照模型
// =================================================================

// 行程天数天气快照模型，存储行程中特定日期的天气预报
model ItineraryDayWeatherSnapshot {
  id              Int       @id @default(autoincrement())
  date            DateTime  @db.Date // 预报日期
  temperatureHigh Decimal?  @db.Decimal(5, 2) // 最高温度
  temperatureLow  Decimal?  @db.Decimal(5, 2) // 最低温度
  condition       String    @db.VarChar(100) // 天气状况
  humidity        Int? // 湿度百分比
  windSpeed       Decimal?  @db.Decimal(5, 2) // 风速
  windDirection   String?   @db.VarChar(50) // 风向
  precipitation   Decimal?  @db.Decimal(5, 2) // 降水量
  uvIndex         Int? // 紫外线指数
  sunrise         DateTime? @db.Time // 日出时间
  sunset          DateTime? @db.Time // 日落时间
  forecastSource  String?   @db.VarChar(100) // 天气预报来源
  capturedAt      DateTime  @default(now()) @db.Timestamptz() // 快照捕获时间

  itineraryDay   ItineraryDay @relation(fields: [itineraryDayId], references: [id], onDelete: Cascade) // 关联的行程天数
  itineraryDayId Int          @unique

  // 天气预报的地理位置
  location   Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  locationId Int?

  @@index([locationId])
  @@map("itinerary_day_weather_snapshots")
}

// =================================================================
// 审计日志模型
// =================================================================

// 审计状态枚举
enum AuditStatus {
  SUCCESS // 成功
  FAILED // 失败
}

// 审计日志模型，记录系统操作日志
model AuditLog {
  id          Int         @id @default(autoincrement())
  action      String      @db.VarChar(100) // 操作类型
  entityType  String      @db.VarChar(100) // 实体类型
  entityId    Int // 实体ID
  oldData     Json? // 旧数据
  newData     Json? // 新数据
  performedAt DateTime    @default(now()) @db.Timestamptz() // 操作时间
  ipAddress   String?     @db.VarChar(45) // IP地址
  userAgent   String?     @db.Text // 用户代理
  status      AuditStatus @default(SUCCESS) // 操作状态
  reason      String?     @db.Text // 操作原因

  performedBy   User @relation(fields: [performedById], references: [id], onDelete: Restrict) // 操作者
  performedById Int

  @@index([entityType, entityId]) // 实体类型和ID索引提升查询性能
  @@index([performedAt]) // 操作时间索引提升时间范围查询性能
  @@index([performedById])
  @@map("audit_logs")
}
